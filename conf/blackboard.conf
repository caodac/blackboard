
http.port=9000
# use our ehcache.xml configuration
play.cache.createBoundCaches = false
play.filters.headers.contentSecurityPolicy = null
#play.filters.enabled=[]

#play.http.context = "/blackboard"
# websocket host
play.http.ws = "ws://localhost:"${http.port}
#play.http.ws = "wss://translator.ncats.io"
blackboard {
  base = "."
  # this should be converted to proper json-ld context
  node {
    type = [
    	 "kgraph",
	 "ksource",
    	 "disease",
    	 "protein",
    	 "drug",
    	 "gene",
      "ACTI",
      "ANAT",
      "CONC",
      "DEVI",
      "GEOG",
      "LIVB",
      "OBJC",
      "OCCU",
      "ORGA",
      "PHEN",
      "PHYS",
      "PROC",
	 "query"
    ]
  }
  edge {
    type = [
    	 "assertion",
      	 "inference",
      	 "resolve"
    ]
  }
  evidence {
    type = [
    	 "clinical",
    	 "in vivo",
    	 "in vitro",
	 "literature"
    ]
  }
}

#
# standalone apps
#
app {
    pubmed {
       max-timeout = 30 # in seconds
       max-tries = 5 # maximum number of retries due to timeout
       max-hits = 20 # max hits per page
       dispatcher = "pubmed-dispatcher"
       base = "."
       indexes = [
         "pubmed-01.db",
         "pubmed-02.db",
       ]
       # overriden locally for any of the above parameters
       include "pubmed-index"
    }
    idg {
       base = "."
       indexes = [
         "idg-01.db",
       ]
       include "idg-index"
    }
}

#
# modules
#
ksource {
   aws {
       # aws parameters; if not specified, use default
       region = "us-east-1"
       access-key-id = ""
       secret-access-key = ""
       name = "AWS Services"
       class = "blackboard.aws.AWSKSource"
       version = "v0.1"
       description = "Knowledge source built on on AWS' services"
   }

   disease {
      api = "https://disease-knowledge.ncats.io/api"
      name = "NCATS Disease"
      class = "blackboard.disease.DiseaseSKSource"
      version = "v11"
      description = "NCATS disease knowledge source"
   }
    
#   pharos {
#      name = "Pharos Knowledge Source"
#      version = "v0.1"
#      uri = "https://pharos.ncats.io/idg/api/v1"
#      class = "blackboard.pharos.PharosKSource"
#      max-generif = 20
#   }
   
#   biothings {
#      name = "Biothings Drug Query"
#      version = "v1"
#      uri = "http://c.biothings.io/v1"
#      class = "blackboard.biothings.DrugKSource"
#      description = "This is a knowledge source derived from biothings drug api."
#   }
   
#   beacons {
#      name = "Beacon API"
#      version = "v1"
#      uri = "https://kba.ncats.io"
#      class = "blackboard.beacons.BeaconKSource"
#      description = "This is a knowledge source derived from the beacon knowledge api."
#   }
   
   # add other knowlegde sources here
   pubmed {
      name = "PubMed"
      version = "v1"
      api {
        # required
        uri = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils",
        key = "YOUR_NCBI_API_KEY_HERE"
        include "ncbi-apikey"
      }
      # required
      max-results = 100
      mesh = "https://id.nlm.nih.gov/mesh/2018",
      class = "blackboard.pubmed.PubMedKSource"
      description = "A simple PubMed knowledge source implementation"
   }

   mesh {
      name = "MeSH"
      version = "v1"
      # this database must generated from xml files downloaded at
      # https://www.nlm.nih.gov/mesh/download_mesh.html
      # using the program blackboard.mesh.BuildMeshIndex
      db = "mesh2019.db"
      class = "blackboard.mesh.MeshKSource"
      description = "MeSH knowledge source"
   }

   # umls resource (https://uts.nlm.nih.gov/) requires api key
   umls {
      metamap {
         host = "metamap" # docker
#         host = "metamap.ncats.io"
         port = 18066
         timeout = 5000
      }
      semrep {
         url = "http://localhost:8067/"
      }
      #semtypes = "SemanticTypes_2018AB.txt"
      semtypes = "SemanticTypes_2013AA.txt"
      name = "UMLS"
      version = "2017AB"
      class = "blackboard.umls.UMLSKSource"
      description = "UMLS knowledge source"
   }

   semmed {
      name = "SemMedDB"
      version = "v1"
      class = "blackboard.semmed.SemMedDbKSource"
      description = "SemMedDB knowledge source"
      min-predicate-count = 1
      semantic-types = "SemanticTypes_2018AB.txt" # semantic type definitions
   }

   # clinical trial
   ct {
      name = "ClinicalTrial"
      version = "v1"
      class = "blackboard.ct.ClinicalTrialKSource"
      description = "Knowledge source for ClinicalTrials.gov"
      db = "ct07012018.db"
   }
   
   chembl {
      name = "ChEMBL",
      version = "v1",
      class = "blackboard.chembl.ChemblKSource",
      description = ""
   }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
#  default {
#    driver = org.h2.Driver
#    url = "jdbc:h2:mem:play"
#    username = sa
#    password = ""
#  }

  semmed {
     driver = "com.mysql.jdbc.Driver"
     url = "jdbc:mysql://mysql/semmed"
     username = "root"
     password = ""
  }

  chembl {
     driver = "com.mysql.jdbc.Driver"
     url = "jdbc:mysql://mysql/chembl"
     username = "root"
     password = ""     
  }

  umls {
     driver = "com.mysql.jdbc.Driver"
     url = "jdbc:mysql://mysql/umls"
     username = "root"
     password = ""
  }

  tcrd {
     driver = "com.mysql.jdbc.Driver"
     url = "jdbc:mysql://mysql/tcrd"
     username = "root"
     password = ""
  }
  
  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

pubmed-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}

disease-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}
